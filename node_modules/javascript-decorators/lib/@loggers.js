'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._donotlog = exports._donotlogerrors = exports._donotlogwarnings = exports._donotlogmessages = exports._donotbase = exports._loglocalstorage = exports._getLocalStorage = exports._log = undefined;

var _helpers = require('./helpers');

/**
 * Logs the passed arguments and the returned value
 *
 * @method log
 *
 */
var _log = exports._log = function _log() {
  return function (target, key, descriptor) {
    var func = descriptor.value;
    (0, _helpers.descriptorIsFunc)(target, func);
    descriptor.value = function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var res = func.apply(this, args);
      console.log('%c Passed Arguments: ', 'background: #222; color: #bada55', args);
      console.log('%c Returned Value  : ', 'background: #bada55; color: #222', res);
      return res;
    };
    return descriptor;
  };
};

/**
 * Returns the global localStorage
 *
 * @method getLocalStorage
 *
 * @return { object }
 */
/**
* Debugging decorators
*
* @author  Avraam Mavridis      <avr.mav@gmail.com>
*
*/
var _getLocalStorage = exports._getLocalStorage = function _getLocalStorage() {
  return localStorage;
};

/**
 * Returns an array with the items on localStorage with their sizes
 *
 * @method _getLocalStorageItems
 *
 * @return {[type]}              [description]
 */
var _getLocalStorageItems = function _getLocalStorageItems() {
  var _localStorage = _getLocalStorage();
  var sizes = Object.keys(_localStorage);
  sizes = sizes.map(function (key) {
    var obj = {};
    obj.name = key;
    obj.size = localStorage[key].length * 2 / 1024 / 1024;
    return obj;
  });
  return sizes;
};

/**
 * Returns the total size of the items in the localStorage
 *
 * @method _getLocalStorageSize
 *
 * @return { number }
 */
var _getLocalStorageSize = function _getLocalStorageSize() {
  var items = _getLocalStorageItems();
  var size = items.reduce(function (sum, next) {
    return sum + next.size;
  }, 0);
  return size;
};

/**
 * Logs the localStorage before and after the function call
 *
 * @method loglocalstorage
 *
 */
var _loglocalstorage = exports._loglocalstorage = function _loglocalstorage() {

  return function (target, key, descriptor) {
    var func = descriptor.value;
    (0, _helpers.descriptorIsFunc)(target, func);
    descriptor.value = function () {
      var sizeBefore = _getLocalStorageSize();
      console.log('%c Local Storage Size Before Function Call: ', 'background: #222; color: #bada55', sizeBefore + ' MB');

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var res = func.apply(this, args);
      var sizeAfter = _getLocalStorageSize();
      console.log('%c Local Storage Size After Function Call : ', 'background: #bada55; color: #222', sizeAfter + ' MB');
      return res;
    };
    return descriptor;
  };
};

/**
 * donotlog decorator, prevents log statements on the console
 *
 * @method _donotlog
 *
 * @return {[type]}  [description]
 */
var _donotbase = exports._donotbase = function _donotbase(type) {
  var nativeFuncs = {};
  var types = [].concat(type);

  return function (key, target, descriptor) {
    var func = descriptor.value;
    (0, _helpers.descriptorIsFunc)(key, func);
    descriptor.value = function () {
      // nooping native console
      types.forEach(function (_type) {
        nativeFuncs[_type] = console[_type];
        console[_type] = _helpers.noop;
      });

      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var res = func.apply(this, args);

      // restore native
      types.forEach(function (_type) {
        console[_type] = nativeFuncs[_type];
      });

      return res;
    };
    return descriptor;
  };
};

var _donotlogmessages = exports._donotlogmessages = _donotbase.bind({}, 'log');
var _donotlogwarnings = exports._donotlogwarnings = _donotbase.bind({}, 'warn');
var _donotlogerrors = exports._donotlogerrors = _donotbase.bind({}, 'error');
var _donotlog = exports._donotlog = _donotbase.bind({}, ['error', 'log', 'warn', 'table']);