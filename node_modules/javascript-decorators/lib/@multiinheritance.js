'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._partialyInherit = exports._multiInherit = undefined;

var _validationHelpers = require('./validationHelpers');

var __inherit = function __inherit(_clas, _meths, _partially) {
  var classes = [].concat(_clas).reverse();
  var methods = [].concat(_meths);
  return function (target) {
    classes.forEach(function (_class) {
      var keys = Object.getOwnPropertyNames(_class.prototype);
      keys.forEach(function (key) {
        if (_partially) {
          if (!target.prototype[key] && methods.indexOf(key) > -1 && (0, _validationHelpers._isFunction)(_class.prototype[key])) {
            target.prototype[key] = _class.prototype[key];
          }
        } else if (!_partially) {
          if (!target.prototype[key] && (0, _validationHelpers._isFunction)(_class.prototype[key])) {
            target.prototype[key] = _class.prototype[key];
          }
        }
      });
    });
    return target;
  };
};

/**
 * Inherit all the methods of the passed classes
 * if two classes have method with the same name
 * the last one is inheritted.
 *
 * @method _multiInherit
 *
 * @param  { array of classes }
 *
 * @return { class }
 */
/**
* Multinheritance decorator
*
* @author  Avraam Mavridis      <avr.mav@gmail.com>
*
*/
var _multiInherit = exports._multiInherit = function _multiInherit() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return __inherit(args, [], false);
};

/**
 * Inherit only the specified classes
 *
 * @method _partialyInherit
 *
 * @param  { array of classes or  a class }   _clas
 * @param  { array of strings or string }     _meths
 *
 * @return { class }
 */
var _partialyInherit = exports._partialyInherit = function _partialyInherit(_clas, _meths) {
  var classes = [].concat(_clas);
  var methods = [].concat(_meths);
  return __inherit(classes, methods, true);
};