'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._forceoverridden = exports._overridden = undefined;

var _helpers = require('./helpers');

/**
 * The method can be called from an instance of the base
 * class, but cannot be called from an instance of a derived class
 *
 * @method _overridden
 *
 */
var _overridden = exports._overridden = function _overridden() {
  return function (target, key, descriptor) {
    var func = descriptor.value;
    (0, _helpers.descriptorIsFunc)(key, func);
    descriptor.value = function () {
      var thisPrototype = Object.getPrototypeOf(this);
      if (target !== thisPrototype) {
        throw Error(thisPrototype.constructor.name + ' should overridde method ' + key + ' of the base class ' + target.constructor.name);
      }

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return func.call(this, args);
    };
    return descriptor;
  };
};

/**
 * The method can not be called from an instance of the base or
 * derived class, it should be overridden
 *
 * @method _forceoverriden
 *
 */
/**
* Debugging decorators
*
* @author  Avraam Mavridis      <avr.mav@gmail.com>
*
*/
var _forceoverridden = exports._forceoverridden = function _forceoverridden() {
  return function (target, key, descriptor) {
    (0, _helpers.descriptorIsFunc)(key, descriptor.value);
    descriptor.value = function () {
      throw Error('method ' + key + ' of the base class ' + target.constructor.name + ' should be overridden');
    };
    return descriptor;
  };
};