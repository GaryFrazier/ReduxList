'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._leftCompose = exports._compose = undefined;

var _validationHelpers = require('./validationHelpers');

var _helpers = require('./helpers');

/**
* Compose decorator
*
* @method _compose
*
*
* @return { function }  decorator function
*/
/**
* @compose decorator
*
* @author  Avraam Mavridis      <avr.mav@gmail.com>
*
*/
var __compose = function __compose(_meths, composeType) {
  if (composeType === 'LEFT_COMPOSE') {
    _meths.reverse();
  }
  var meths = [].concat(_meths);
  meths.forEach(function (meth) {
    if (!(0, _validationHelpers._isFunction)(meth)) {
      throw Error(meth.constructor.name + ' is not a function');
    }
  });

  return function (target, key, descriptor) {
    var func = descriptor.value;
    (0, _helpers.descriptorIsFunc)(key, func);
    descriptor.value = function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var initres = func.apply(this, args);
      var res = meths.reduce(function (previousValue, currentMeth) {
        return currentMeth(previousValue);
      }, initres);

      return res;
    };
  };
};

var _compose = exports._compose = function _compose(_meths) {
  return __compose(_meths, 'RIGHT_COMPOSE');
};

var _leftCompose = exports._leftCompose = function _leftCompose(_meths) {
  return __compose(_meths, 'LEFT_COMPOSE');
};